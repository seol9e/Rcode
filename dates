# The date R 3.0.0 was released
x <- "2013-04-03"

# Examine structure of x
str(x)

# Use as.Date() to interpret x as a date
x_date <- as.Date(x)

# Examine structure of x_date
str(x_date)

# Store April 10 2014 as a Date
april_10_2014 <- as.Date("2014-04-10")
# Remove rows with invalid numbers
sfo_survey %>%
  filter(str_length(phone)!=12)
# Check out the accounts data frame
head(accounts)

# Define the date formats
formats <- c("%Y-%m-%d", "%B %d, %Y")

# Convert dates to the same format
accounts %>%
  mutate(date_opened_clean = parse_date_time(date_opened,formats))
# Scatter plot of opening date and total amount
accounts %>%
  ggplot(aes(x = date_opened, y = total)) +
  geom_point()
# Load the readr package
library(readr)

# Use read_csv() to import rversions.csv
releases <- read_csv("rversions.csv")

# Examine the structure of the date column
str(releases$date)

# Load the anytime package
library(anytime)

# Various ways of writing Sep 10 2009
sep_10_2009 <- c("September 10 2009", "2009-09-10", "10 Sep 2009", "09-10-2009")

# Use anytime() to parse sep_10_2009
anytime(sep_10_2009)
library(ggplot2)

# Set the x axis to the date column
ggplot(releases, aes(x = date, y = type)) +
  geom_line(aes(group = 1, color = factor(major)))

# Limit the axis to between 2010-01-01 and 2014-01-01
ggplot(releases, aes(x = date, y = type)) +
  geom_line(aes(group = 1, color = factor(major))) +
  xlim(as.Date("2010-01-01"), as.Date("2014-01-01"))

# Specify breaks every ten years and labels with "%Y"
ggplot(releases, aes(x = date, y = type)) +
  geom_line(aes(group = 1, color = factor(major))) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y")
# Find the largest date
last_release_date <- max(releases$date)

# Filter row for last release
last_release <- filter(releases, date==last_release_date)

# Print last_release
last_release

# How long since last release?
Sys.Date() - last_release_date
# Use as.POSIXct to enter the datetime 
as.POSIXct("2010-10-01 12:12:00")

# Use as.POSIXct again but set the timezone to `"America/Los_Angeles"`
as.POSIXct("2010-10-01 12:12:00", tz = "America/Los_Angeles")

# Use read_csv to import rversions.csv
releases <- read_csv("rversions.csv")

# Examine structure of datetime column
str(releases$datetime)
# Import "cran-logs_2015-04-17.csv" with read_csv()
logs <- read_csv("cran-logs_2015-04-17.csv")

# Print logs
print(logs)

# Store the release time as a POSIXct object
release_time <- as.POSIXct("2015-04-16 07:13:33", tz = "UTC")

# When is the first download of 3.2.0?
logs %>% 
  filter(as.numeric(datetime)>as.numeric(release_time),
    r_version == "3.2.0")

# Examine histograms of downloads by version
ggplot(logs, aes(x = datetime)) +
  geom_histogram() +
  geom_vline(aes(xintercept = as.numeric(release_time)))+
  facet_wrap(~ r_version, ncol = 1)
library(lubridate)

# Parse x 
x <- "2010 September 20th" # 2010-09-20
ymd(x)

# Parse y 
y <- "02.01.2010"  # 2010-01-02
dmy(y)

# Parse z 
z <- "Sep, 12th 2010 14:00"  # 2010-09-12T14:00
mdy_hm(z)
# Specify an order string to parse x
x <- "Monday June 1st 2010 at 4pm"
parse_date_time(x, orders = "Amdy Ip")

# Specify order to include both "mdy" and "dmy"
two_orders <- c("October 7, 2001", "October 13, 2002", "April 13, 2003", 
  "17 April 2005", "23 April 2017")
parse_date_time(two_orders, orders = c("mdy","dmy"))

# Specify order to include "dOmY", "OmY" and "Y"
short_dates <- c("11 December 1282", "May 1372", "1253")
parse_date_time(short_dates, orders = c("dOmY", "OmY", "Y"))
library(lubridate)
library(readr)
library(dplyr)
library(ggplot2)

# Import CSV with read_csv()
akl_daily_raw <- read_csv("akl_weather_daily.csv")

# Print akl_daily_raw
print(akl_daily_raw)

# Parse date 
akl_daily <- akl_daily_raw %>%
  mutate(date = ymd(date))

# Print akl_daily
print(akl_daily)


# Plot to check work
ggplot(akl_daily, aes(x = date, y = max_temp)) +
  geom_line() 
library(lubridate)
library(readr)
library(dplyr)
library(ggplot2)

# Import "akl_weather_hourly_2016.csv"
akl_hourly_raw <- read_csv("akl_weather_hourly_2016.csv")

# Print akl_hourly_raw
print(akl_hourly_raw)

# Use make_date() to combine year, month and mday 
akl_hourly  <- akl_hourly_raw  %>% 
  mutate(date = make_date(year = year, month = month, day = mday))

# Parse datetime_string 
akl_hourly <- akl_hourly  %>% 
  mutate(
    datetime_string = paste(date, time, sep = "T"),
    datetime = ymd_hms(datetime_string)
  )

# Print date, time and datetime columns of akl_hourly
akl_hourly %>% select(date, time, datetime)

# Plot to check work
ggplot(akl_hourly, aes(x =datetime, y = temperature)) +
  geom_line()
# Examine the head() of release_time
head(release_time)

# Examine the head() of the months of release_time
head(month(release_time))

# Extract the month of releases 
month(release_time) %>% table()

# Extract the year of releases
year(release_time) %>% table()

# How often is the hour before 12 (noon)?
mean(hour(release_time) < 12)

# How often is the release in am?
mean(am(release_time))
library(ggplot2)

# Use wday() to tabulate release by day of the week
wday(releases$datetime) %>% table()

# Add label = TRUE to make table more readable
wday(releases$datetime, label=TRUE) %>% table()

# Create column wday to hold labelled week days
releases$wday <- wday(releases$datetime, label=TRUE)

# Plot barchart of weekday by type of release
ggplot(releases, aes(wday)) +
  geom_bar() +
  facet_wrap(~ type, ncol = 1, scale = "free_y")
library(ggplot2)
library(dplyr)
library(ggridges)

# Add columns for year, yday and month
akl_daily <- akl_daily %>%
  mutate(
    year = year(date),
    yday = yday(date),
    month = month(date, label=TRUE))

# Plot max_temp by yday for all years
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
  geom_line(aes(group = year), alpha = 0.5)

# Examine distribution of max_temp by month
ggplot(akl_daily, aes(x = max_temp, y = month, height = ..density..)) +
  geom_density_ridges(stat = "density")
# Create new columns hour, month and rainy
akl_hourly <- akl_hourly %>%
  mutate(
    hour = hour(datetime),
    month = month(datetime, label=TRUE),
    rainy = weather == "Precipitation"
  )

# Filter for hours between 8am and 10pm (inclusive)
akl_day <- akl_hourly %>% 
  filter(hour>=8 & hour<=22)

# Summarise for each date if there is any rain
rainy_days <- akl_day %>% 
  group_by(month, date) %>%
  summarise(
    any_rain = any(rainy)
  )

# Summarise for each month, the number of days with rain
rainy_days %>% 
  summarise(
    days_rainy = sum(any_rain)
  )
r_3_4_1 <- ymd_hms("2016-05-03 07:13:28 UTC")

# Round down to day
floor_date(r_3_4_1, unit = "day")

# Round to nearest 5 minutes
round_date(r_3_4_1, unit = "5 minutes")

# Round up to week 
ceiling_date(r_3_4_1, unit = "week")

# Subtract r_3_4_1 rounded down to day
r_3_4_1 - floor_date(r_3_4_1, unit = "day")
# Create day_hour, datetime rounded down to hour
akl_hourly <- akl_hourly %>%
  mutate(
    day_hour = floor_date(datetime, unit = "hour")
  )

# Count observations per hour  
akl_hourly %>% 
  count(day_hour) 

# Find day_hours with n != 2  
akl_hourly %>% 
  count(day_hour) %>%
  filter(n!=2) %>% 
  arrange(desc(n))
# The date of landing and moment of step
date_landing <- mdy("July 20, 1969")
moment_step <- mdy_hms("July 20, 1969, 02:56:15", tz = "UTC")

# How many days since the first man on the moon?
difftime(today(), date_landing, units = "days")

# How many seconds since the first man on the moon?
difftime(now(),moment_step, units = "secs")
# Three dates
mar_11 <- ymd_hms("2017-03-11 12:00:00", 
  tz = "America/Los_Angeles")
mar_12 <- ymd_hms("2017-03-12 12:00:00", 
  tz = "America/Los_Angeles")
mar_13 <- ymd_hms("2017-03-13 12:00:00", 
  tz = "America/Los_Angeles")

# Difference between mar_13 and mar_12 in seconds
difftime(mar_13, mar_12, units = "secs")

# Difference between mar_12 and mar_11 in seconds
difftime(mar_12, mar_11, units = "secs")
# Add a period of one week to mon_2pm
mon_2pm <- dmy_hm("27 Aug 2018 14:00")
mon_2pm + days(7)

# Add a duration of 81 hours to tue_9am
tue_9am <- dmy_hm("28 Aug 2018 9:00")
tue_9am + dhours(81)

# Subtract a period of five years from today()
today() - years(5)

# Subtract a duration of five years from today()
today() - dyears(5)
# Time of North American Eclipse 2017
eclipse_2017 <- ymd_hms("2017-08-21 18:26:40")

# Duration of 29 days, 12 hours, 44 mins and 3 secs
synodic <- ddays(29)+dhours(12)+dminutes(44)+dseconds(3)

# 223 synodic months
saros <- 223*synodic

# Add saros to eclipse_2017
eclipse_2017+saros
# Add a period of 8 hours to today
today_8am <- today() + dhours(8)

# Sequence of two weeks from 1 to 26
every_two_weeks <- 1:26*weeks(2)

# Create datetime for every two weeks for a year
every_two_weeks+today_8am
# A sequence of 1 to 12 periods of 1 month
month_seq <- 1:12*months(1)

# Add 1 to 12 months to jan_31
jan_31 + month_seq

# Replace + with %m+%
jan_31%m+%month_seq

# Replace + with %m-%
jan_31%m-% month_seq
# Print monarchs
 print(monarchs)
# A tibble: 131 x 4
   name                     from                to                  dominion    
   <chr>                    <dttm>              <dttm>              <chr>       
 1 Elizabeth II             1952-02-06 00:00:00 2023-12-18 00:00:00 United King~
 2 Victoria                 1837-06-20 00:00:00 1901-01-22 00:00:00 United King~
 3 George V                 1910-05-06 00:00:00 1936-01-20 00:00:00 United King~
 4 George III               1801-01-01 00:00:00 1820-01-29 00:00:00 United King~
 5 George VI                1936-12-11 00:00:00 1952-02-06 00:00:00 United King~
 6 George IV                1820-01-29 00:00:00 1830-06-26 00:00:00 United King~
 7 Edward VII               1901-01-22 00:00:00 1910-05-06 00:00:00 United King~
 8 William IV               1830-06-26 00:00:00 1837-06-20 00:00:00 United King~
 9 Edward VIII              1936-01-20 00:00:00 1936-12-11 00:00:00 United King~
10 George III(also United ~ 1760-10-25 00:00:00 1801-01-01 00:00:00 Great Brita~
# ... with 121 more rows
# Create an interval for reign
monarchs <- monarchs %>%
  mutate( reign= from%--% to) 
# Find the length of reign, and arrange
monarchs %>%
  mutate(length = int_length(reign)) %>% 
  arrange(desc(length)) %>%
  select(name, length, dominion)
# A tibble: 131 x 3
   name                   length dominion      
   <chr>                   <dbl> <chr>         
 1 Elizabeth II       2267827200 United Kingdom
 2 Victoria           2006726400 United Kingdom
 3 James VI           1820102400 Scotland      
 4 Gruffudd ap Cynan  1767139200 Gwynedd       
 5 Edward III         1590624000 England       
 6 William I          1545868800 Scotland      
 7 Llywelyn the Great 1428796800 Gwynedd       
 8 Elizabeth I        1399507200 England       
 9 Constantine II     1356912000 Scotland      
10 David II           1316304000 Scotland      
# ... with 121 more rows
# Print halleys
halleys
# A tibble: 27 x 6
   designation     year perihelion_date start_date end_date  distance
   <chr>          <int> <date>          <date>     <date>    <chr>   
 1 1P/66 B1, 66      66 66-01-26        66-01-25   66-01-26  <NA>    
 2 1P/141 F1, 141   141 141-03-25       141-03-22  141-03-25 <NA>    
 3 1P/218 H1, 218   218 218-04-06       218-04-06  218-05-17 <NA>    
 4 1P/295 J1, 295   295 295-04-07       295-04-07  295-04-20 <NA>    
 5 1P/374 E1, 374   374 374-02-13       374-02-13  374-02-16 0.09 AU 
 6 1P/451 L1, 451   451 451-07-03       451-06-28  451-07-03 <NA>    
 7 1P/530 Q1, 530   530 530-11-15       530-09-27  530-11-15 <NA>    
 8 1P/607 H1, 607   607 607-03-26       607-03-15  607-03-26 0.09 AU 
 9 1P/684 R1, 684   684 684-11-26       684-10-02  684-11-26 <NA>    
10 1P/760 K1, 760   760 760-06-10       760-05-20  760-06-10 <NA>    
# ... with 17 more rows
# New column for interval from start to end date
halleys <- halleys %>% 
  mutate(visible = start_date %--% end_date)
# The visitation of 1066
halleys_1066 <- halleys[14, ] 
# Monarchs in power on perihelion date
monarchs %>% 
  filter(halleys_1066$perihelion_date %within% reign) %>%
  select(name, from, to, dominion)
# A tibble: 2 x 4
  name        from                to                  dominion
  <chr>       <dttm>              <dttm>              <chr>   
1 Harold II   1066-01-05 00:00:00 1066-10-14 00:00:00 England 
2 Malcolm III 1058-03-17 00:00:00 1093-11-13 00:00:00 Scotland
# Monarchs whose reign overlaps visible time
monarchs %>% 
  filter(int_overlaps(halleys_1066$visible,reign)) %>%
  select(name, from, to, dominion)
# A tibble: 3 x 4
  name                 from                to                  dominion
  <chr>                <dttm>              <dttm>              <chr>   
1 Edward the Confessor 1042-06-08 00:00:00 1066-01-05 00:00:00 England 
2 Harold II            1066-01-05 00:00:00 1066-10-14 00:00:00 England 
3 Malcolm III          1058-03-17 00:00:00 1093-11-13 00:00:00 Scotland
# New columns for duration and period
monarchs <- monarchs %>%
  mutate(
    duration = as.duration(reign),
    period = as.period(reign)) 
    
# Examine results    
monarchs %>%
  select(name,duration, period)
# Game2: CAN vs NZL in Edmonton
game2 <- mdy_hm("June 11 2015 19:00")

# Game3: CHN vs NZL in Winnipeg
game3 <- mdy_hm("June 15 2015 18:30")

# Set the timezone to "America/Edmonton"
game2_local <- force_tz(game2, tzone = "America/Edmonton")
game2_local

# Set the timezone to "America/Winnipeg"
game3_local <- force_tz(game3, tzone = "America/Winnipeg")
game3_local

# How long does the team have to rest?
as.period(game2_local %--% game3_local)
# What time is game2_local in NZ?
with_tz(game2_local, tzone = "Pacific/Auckland")

# What time is game2_local in Corvallis, Oregon?
with_tz(game2_local, tzone = "America/Los_Angeles")

# What time is game3_local in NZ?
with_tz(game3_local, tzone= "Pacific/Auckland")
# Examine datetime and date_utc columns
head(akl_hourly$datetime)
head(akl_hourly$date_utc)
  
# Force datetime to Pacific/Auckland
akl_hourly <- akl_hourly %>%
  mutate(
    datetime = force_tz(datetime, tzone = "Pacific/Auckland"))

# Reexamine datetime
head(akl_hourly$datetime)
  
# Are datetime and date_utc the same moments
table(akl_hourly$datetime-akl_hourly$date_utc)
