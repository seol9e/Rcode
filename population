# Find number of counties per state, weighted by citizens, sorted in descending order
counties_selected %>%
  count(citizens)
# Find number of counties per state, weighted by citizens, sorted in descending order
counties_selected %>%
  count(state,wt=citizens, sort=TRUE)
counties_selected %>%
  # Add population_walk containing the total number of people who walk to work 
  mutate(population_walk=population*walk/100)%>%
  # Count weighted by the new column, sort in descending order
  count(state, wt=population_walk, sort=TRUE)
# A tibble: 50 × 2
   state                n
   <chr>            <dbl>
 1 New York      1237938.
 2 California    1017964.
 3 Pennsylvania   505397.
 4 Texas          430783.
 5 Illinois       400346.
 6 Massachusetts  316765.
 7 Florida        284723.
 8 New Jersey     273047.
 9 Ohio           266911.
10 Washington     239764.
# … with 40 more rows

counties_selected %>%
  # Summarize to find minimum population, maximum unemployment, and average income
 summarize(min_population=min(population),
 max_unemployment= max(unemployment), 
# A tibble: 1 × 3
  min_population max_unemployment average_income
           <dbl>            <dbl>          <dbl>
1             85             29.4         46832.
counties_selected %>%
  group_by(state) %>%
  summarize(total_area = sum(land_area),
            total_population = sum(population)) %>%
  # Add a density column
  mutate(density=total_population/total_area)%>%
  # Sort by density in descending order
  arrange(desc(density))
# A tibble: 50 × 4
   state         total_area total_population density
   <chr>              <dbl>            <dbl>   <dbl>
 1 New Jersey         7354.          8904413   1211.
 2 Rhode Island       1034.          1053661   1019.
 3 Massachusetts      7800.          6705586    860.
 4 Connecticut        4842.          3593222    742.
 5 Maryland           9707.          5930538    611.
 6 Delaware           1949.           926454    475.
 7 New York          47126.         19673174    417.
 8 Florida           53625.         19645772    366.
 9 Pennsylvania      44743.         12779559    286.
10 Ohio              40861.         11575977    283.
# … with 40 more rows

counties_selected %>%
  # Group and summarize to find the total population
  group_by(region, state) %>%
  summarize(total_pop = sum(population)) %>%
  # Calculate the average_pop and median_pop columns 
  summarize(average_pop = mean(total_pop),median_pop = median(total_pop))
# A tibble: 4 × 3
  region        average_pop median_pop
  <chr>               <dbl>      <dbl>
1 North Central    5627687.    5580644
2 Northeast        6221058.    3593222
3 South            7370486     4804098
4 West             5722755.    2798636
 average_income=mean(income))
counties_selected %>%
  group_by(region, state) %>%
  # Calculate average income
  summarize(average_income=mean(income))%>%
  # Find the lowest income state in each region
  slice_min(average_income,n=1)
# A tibble: 4 × 3
# Groups:   region [4]
  region        state       average_income
  <chr>         <chr>                <dbl>
1 North Central Missouri            41755.
2 Northeast     Maine               46142.
3 South         Mississippi         34939.
4 West          New Mexico          40184.
counties_selected %>%
  # Find the total population for each combination of state and metro
  group_by(state, metro) %>%
  summarize(total_pop = sum(population)) %>%
  # Extract the most populated row for each state
  slice_max(total_pop, n = 1) %>%
  # Count the states with more people in Metro or Nonmetro areas
  ungroup()%>%
  count(metro)
# A tibble: 2 × 2
  metro        n
  <chr>    <int>
1 Metro       44
2 Nonmetro     6
   # Glimpse the counties table
glimpse(counties)
counties %>%
  # Select state, county, population, and industry-related columns
  select(state, county, population,professional:production)%>%
  # Arrange service in descending order 
  arrange(desc(service))
# A tibble: 3,138 × 8
   state   county population professional service office construction production
   <chr>   <chr>       <dbl>        <dbl>   <dbl>  <dbl>        <dbl>      <dbl>
 1 Missis… Tunica      10477         23.9    36.6   21.5          3.5       14.5
 2 Texas   Kinney       3577         30      36.5   11.6         20.5        1.3
 3 Texas   Kenedy        565         24.9    34.1   20.5         20.5        0  
 4 New Yo… Bronx     1428357         24.3    33.3   24.2          7.1       11  
 5 Texas   Brooks       7221         19.6    32.4   25.3         11.1       11.5
 6 Colora… Fremo…      46809         26.6    32.2   22.8         10.7        7.6
 7 Texas   Culbe…       2296         20.1    32.2   24.2         15.7        7.8
 8 Califo… Del N…      27788         33.9    31.5   18.8          8.9        6.8
 9 Minnes… Mahno…       5496         26.8    31.5   18.7         13.1        9.9
10 Virgin… Lanca…      11129         30.3    31.2   22.8          8.1        7.6
# … with 3,128 more rows

counties %>%
  # Select the state, county, population, and those ending with "work"
  select(state,county,population,ends_with("work"))%>%
  # Filter for counties that have at least 50% of people engaged in public work
  filter(public_work>50)
# A tibble: 7 × 6
  state        county            population private_work public_work family_work
  <chr>        <chr>                  <dbl>        <dbl>       <dbl>       <dbl>
1 Alaska       Lake and Peninsu…       1474         42.2        51.6         0.2
2 Alaska       Yukon-Koyukuk Ce…       5644         33.3        61.7         0  
3 California   Lassen                 32645         42.6        50.5         0.1
4 Hawaii       Kalawao                   85         25          64.1         0  
5 North Dakota Sioux                   4380         32.9        56.8         0.1
6 South Dakota Todd                    9942         34.4        55           0.8
7 Wisconsin    Menominee               4451         36.8        59.1         0.4

counties %>%
  # Count the number of counties in each state
  count(state) %>%
  # Rename the n column to num_counties
  rename(num_counties=n)
# A tibble: 50 × 2
   state       num_counties
   <chr>              <int>
 1 Alabama               67
 2 Alaska                28
 3 Arizona               15
 4 Arkansas              75
 5 California            58
 6 Colorado              64
 7 Connecticut            8
 8 Delaware               3
 9 Florida               67
10 Georgia              159
# … with 40 more rows
counties %>%
  # Select state, county, and poverty as poverty_rate
  select(state, county, poverty, poverty_rate=poverty)
# A tibble: 3,138 × 3
   state   county   poverty_rate
   <chr>   <chr>           <dbl>
 1 Alabama Autauga          12.9
 2 Alabama Baldwin          13.4
 3 Alabama Barbour          26.7
 4 Alabama Bibb             16.8
 5 Alabama Blount           16.7
 6 Alabama Bullock          24.6
 7 Alabama Butler           25.4
 8 Alabama Calhoun          20.5
 9 Alabama Chambers         21.6
10 Alabama Cherokee         19.2
# … with 3,128 more rows
counties_selected %>%
  # Move the density column to the end
  relocate(density,.after=last_col())%>%
  # Move the population column to before land_area
  relocate(population, .before=land_area)
# A tibble: 3,138 × 5
   state   county   population land_area density
   <chr>   <chr>         <dbl>     <dbl>   <dbl>
 1 Alabama Autauga       55221      594.    92.9
 2 Alabama Baldwin      195121     1590.   123. 
 3 Alabama Barbour       26932      885.    30.4
 4 Alabama Bibb          22604      623.    36.3
 5 Alabama Blount        57710      645.    89.5
 6 Alabama Bullock       10678      623.    17.1
 7 Alabama Butler        20354      777.    26.2
 8 Alabama Calhoun      116648      606.   193. 
 9 Alabama Chambers      34079      597.    57.1
10 Alabama Cherokee      26008      554.    47.0
# … with 3,128 more rows
# Change the name of the unemployment column
counties %>%
  rename(unemployment_rate = unemployment)

# Keep the state and county columns, and the columns containing poverty
counties %>%
  select(state, county, contains("poverty"))

# Calculate the fraction_women column without dropping the other columns
counties %>%
 mutate(fraction_women = women / population)

# Move the region column to before state
counties %>%
  relocate(region, .before = state)
# A tibble: 3,138 × 40
   census_id region state   county   metro population   men women hispanic white
   <chr>     <chr>  <chr>   <chr>    <chr>      <dbl> <dbl> <dbl>    <dbl> <dbl>
 1 1001      South  Alabama Autauga  Metro      55221 26745 28476      2.6  75.8
 2 1003      South  Alabama Baldwin  Metro     195121 95314 99807      4.5  83.1
 3 1005      South  Alabama Barbour  Nonm…      26932 14497 12435      4.6  46.2
 4 1007      South  Alabama Bibb     Metro      22604 12073 10531      2.2  74.5
 5 1009      South  Alabama Blount   Metro      57710 28512 29198      8.6  87.9
 6 1011      South  Alabama Bullock  Nonm…      10678  5660  5018      4.4  22.2
 7 1013      South  Alabama Butler   Nonm…      20354  9502 10852      1.2  53.3
 8 1015      South  Alabama Calhoun  Metro     116648 56274 60374      3.5  73  
 9 1017      South  Alabama Chambers Nonm…      34079 16258 17821      0.4  57.3
10 1019      South  Alabama Cherokee Nonm…      26008 12975 13033      1.5  91.7
# … with 3,128 more rows, and 30 more variables: black <dbl>, native <dbl>,
#   asian <dbl>, pacific <dbl>, citizens <dbl>, income <dbl>, income_err <dbl>,
#   income_per_cap <dbl>, income_per_cap_err <dbl>, poverty <dbl>,
#   child_poverty <dbl>, professional <dbl>, service <dbl>, office <dbl>,
#   construction <dbl>, production <dbl>, drive <dbl>, carpool <dbl>,
#   transit <dbl>, walk <dbl>, other_transp <dbl>, work_at_home <dbl>,
#   mean_commute <dbl>, employed <dbl>, private_work <dbl>, …

# Add a linear trendline to scatterplot
ggplot(world_happiness, aes(life_exp, happiness_score)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE)

# Correlation between life_exp and happiness_score
cor(world_happiness$life_exp,world_happiness$happiness_score)
# Create log_gdp_per_cap column
world_happiness <- world_happiness %>%
  mutate(log_gdp_per_cap = log(gdp_per_cap))

# Scatterplot of happiness_score vs. log_gdp_per_cap
ggplot(world_happiness, aes( log_gdp_per_cap,happiness_score)) +
  geom_point()

# Calculate correlation
cor(world_happiness$log_gdp_per_cap, world_happiness$happiness_score)
# Scatterplot of grams_sugar_per_day and happiness_score
ggplot(world_happiness, aes(grams_sugar_per_day, happiness_score))+ geom_point()
# Correlation between grams_sugar_per_day and happiness_score
cor(world_happiness$grams_sugar_per_day,world_happiness$happiness_score)
[1] 0.69391
